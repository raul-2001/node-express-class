1. In this lesson, you created a middleware function called asyncWrapper. Why?

-- We created middleware function asyncWrapper, because  we repeated try-catch block in every async operation functions which makes 
our code much redundant and we need to avoid to repeat same code in every functon.
Better solution We need to remove these try-catch blocks and use just one middleware function which will use try-catch block 
and use that operation functions in controller folder. 


2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const createCustomError = require('../errors/custom-error')

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    return next(createCustomError(`No taks whith id: ${TaskID}`, 404)) 
  }  
  res.status(200).json({ task });  
});  
